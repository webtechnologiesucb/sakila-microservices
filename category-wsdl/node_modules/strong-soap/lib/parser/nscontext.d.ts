export interface NamespaceMapping {
    uri: string;
    prefix: string;
    declared: boolean;
}
/**
 * Scope for XML namespaces
 * @param {NamespaceScope} [parent] Parent scope
 * @returns {NamespaceScope}
 * @constructor
 */
export declare class NamespaceScope {
    prefixCount: number;
    namespaces: {
        [prefix: string]: NamespaceMapping;
    };
    parent?: NamespaceScope;
    constructor(parent?: NamespaceScope);
    /**
     * Look up the namespace URI by prefix
     * @param {String} prefix Namespace prefix
     * @param {Boolean} [localOnly] Search current scope only
     * @returns {String} Namespace URI
     */
    getNamespaceURI(prefix: string, localOnly?: boolean): string | undefined;
    getNamespaceMapping(prefix: string): NamespaceMapping | undefined;
    /**
     * Look up the namespace prefix by URI
     * @param {String} nsURI Namespace URI
     * @param {Boolean} [localOnly] Search current scope only
     * @returns {String} Namespace prefix
     */
    getPrefix(nsURI: string, localOnly?: boolean): string | undefined;
    /**
     * Look up the namespace prefix by URI
     * @param {String} nsURI Namespace URI
     * @param {Boolean} [localOnly] Search current scope only
     * @returns {String} Namespace prefix
     */
    getPrefixMapping(nsURI: string, localOnly?: boolean): string | undefined;
    /**
     * Generate a new prefix that is not mapped to any uris
     * @param base {string} The base for prefix
     * @returns {string}
     */
    generatePrefix(base?: string): string;
}
/**
 * Namespace context that manages hierarchical scopes
 * @returns {NamespaceContext}
 * @constructor
 */
export declare class NamespaceContext {
    currentScope?: NamespaceScope;
    scopes: NamespaceScope[];
    constructor();
    /**
     * Add a prefix/URI namespace mapping
     * @param {String} prefix Namespace prefix
     * @param {String} nsURI Namespace URI
     * @param {Boolean} [localOnly] Search current scope only
     * @returns {boolean} true if the mapping is added or false if the mapping
     * already exists
     */
    addNamespace(prefix: string, nsURI: string, localOnly?: boolean): boolean;
    /**
     * Push a scope into the context
     * @returns {NamespaceScope} The current scope
     */
    pushContext(): NamespaceScope;
    /**
     * Pop a scope out of the context
     * @returns {NamespaceScope} The removed scope
     */
    popContext(): NamespaceScope | undefined;
    /**
     * Look up the namespace URI by prefix
     * @param {String} prefix Namespace prefix
     * @param {Boolean} [localOnly] Search current scope only
     * @returns {String} Namespace URI
     */
    getNamespaceURI(prefix: string, localOnly?: boolean): string | undefined;
    /**
     * Look up the namespace prefix by URI
     * @param {String} nsURI Namespace URI
     * @param {Boolean} [localOnly] Search current scope only
     * @returns {String} Namespace prefix
     */
    getPrefix(nsURI: string, localOnly?: boolean): string | undefined;
    /**
     * Look up the namespace mapping by nsURI
     * @param {String} nsURI Namespace URI
     * @returns {String} Namespace mapping
     */
    getPrefixMapping(nsURI: string): string | undefined;
    /**
     * Generate a new prefix that is not mapped to any uris
     * @param base {string} The base for prefix
     * @returns {string}
     */
    generatePrefix(base?: string): string | undefined;
    /**
     * Register a namespace
     * @param {String} prefix Namespace prefix
     * @param {String} nsURI Namespace URI
     * @returns {Object} The matching or generated namespace mapping
     */
    registerNamespace(prefix: string, nsURI: string): NamespaceMapping | undefined;
    /**
     * Declare a namespace prefix/uri mapping
     * @param {String} prefix Namespace prefix
     * @param {String} nsURI Namespace URI
     * @returns {Boolean} true if the declaration is created
     */
    declareNamespace(prefix: string, nsURI: string): NamespaceMapping | undefined;
}
