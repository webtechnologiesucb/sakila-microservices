declare var xmlBuilder: any;
declare var sax: any;
declare var stream: any;
declare var assert: any;
declare var selectn: any;
declare var debug: any;
declare var descriptor: any;
declare var ElementDescriptor: any;
declare var AttributeDescriptor: any;
declare var TypeDescriptor: any;
declare var QName: any;
declare var helper: any;
declare var NamespaceContext: any;
declare var Set: SetConstructor;
declare class XMLHandler {
    constructor(schemas: any, options: any);
    jsonToXml(node: any, nsContext: any, descriptor: any, val: any): any;
    /**
     * Check if the attributes have xsi:type and return the xsi type descriptor if exists
     * @param {*} descriptor The current descriptor
     * @param {*} attrs An object of attribute values
     */
    getXsiType(descriptor: any, attrs: any): any;
    _sortKeys(val: any, elementOrder: any): any;
    /**
     * Map a JSON object into an XML type
     * @param {XMLElement} node The root node
     * @param {NamespaceContext} nsContext Namespace context
     * @param {TypeDescriptor|ElementDescriptor} descriptor
     * @param {Object} val
     * @returns {*}
     */
    mapObject(node: any, nsContext: any, descriptor: any, val: any, attrs: any): any;
    addAttributes(node: any, nsContext: any, descriptor: any, val: any, attrs: any): void;
    static createSOAPEnvelope(prefix: any, nsURI: any): {
        body: any;
        header: any;
        doc: any;
    };
    static createSOAPEnvelopeDescriptor(prefix: any, nsURI: any, parameterDescriptor: any): any;
    /**
     * Parse XML string or stream into the XMLBuilder tree
     * @param root The root node
     * @param xml XML string or stream
     * @param cb
     * @returns {*}
     */
    static parseXml(root: any, xml: any, cb: any): any;
    _processText(top: any, val: any): void;
    xmlToJson(nsContext: any, xml: any, descriptor: any): any;
}
declare function getSoap11FaultErrorMessage(faultBody: any): string | null;
declare function getSoap12FaultErrorMessage(faultBody: any): string | null;
declare function declareNamespace(nsContext: any, node: any, prefix: any, nsURI: any): any;
declare function parseValue(text: any, descriptor: any): any;
